- name: Read the VM list JSON file
  ansible.builtin.shell:
    cmd: qm list -full
  register: qm_list
- name: set default next_vm_id
  ansible.builtin.set_fact:
    next_vm_id: 100
- name: Read the VM list JSON file
  ansible.builtin.slurp:
    src: /etc/pve/.vmlist
  register: vmlist_json
  when: qm_list.stdout != ""
- name: Parse JSON content and find next VM ID
  ansible.builtin.set_fact:
    next_vm_id: "{{ vmlist_json.content | b64decode | from_json | json_query('ids') | dict2items | json_query('[].key') | map('int') | list | max + 1 }}"
  when: qm_list.stdout != ""
- name: check against minimum vm id
  ansible.builtin.set_fact:
    next_vm_id: "{{ proxmox_template.start_id | int }}"
  when: next_vm_id | int < proxmox_template.start_id
- name: debug
  ansible.builtin.debug:
    msg: "{{ next_vm_id }}"
- name: create iso folder
  ansible.builtin.file:
    path: "{{ proxmox_isopath }}"
    state: directory
    mode: '0755'
- name: Copy cloud-init images
  ansible.builtin.get_url:
    url: "{{ item.url }}"
    dest: "{{ proxmox_isopath }}/{{ item.template_name }}.qcow2"
  with_items: "{{ proxmox_cloudimgs }}"
- name: Script to clear machine id
  ansible.builtin.copy:
    src: clear-machine-id.sh
    dest: "{{ proxmox_isopath }}/clear-machine-id.sh"
    mode: '0755'
